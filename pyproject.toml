[tool.poetry]
name = "pas"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
#GitPython = "^3.1.43"
httpx = "^0.27.0"
pydantic = "^2.7.4"
#pydantic-settings = "^2.3.3"
PyYAML = "^6.0.1"
rich = "^13.7.1"
typer = "^0.12.3"
typing-extensions = "^4.12.2"
ollama = "^0.2.1"
chromadb = "^0.5.3"
SQLAlchemy = "^2.0.31"



[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
pre-commit = "^3.7.1"



[tool.poetry.group.openai]
optional = true

[tool.poetry.group.openai.dependencies]
openai = "^1.35.3"



[tool.poetry.group.webtool]
optional = true

[tool.poetry.group.webtool.dependencies]
duckdb = "^1.0.0"
bs4 = "^0.0.2"
duckduckgo-search = "^6.1.7"



[tool.poetry.group.files]
optional = true

[tool.poetry.group.files.dependencies]
textract = "^1.6.5"
pypdf = "^4.2.0"


[tool.poetry.scripts]
pas = "pas_cli.__main__:app"



[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "site-packages",
    "venv",
    "cookbook"
]

extend-exclude = ["tests"]

line-length = 88
indent-width = 4
target-version = "py310"

[tool.ruff.lint]
select = [
    "E4", "E7", "E9", # pycodestyle
    "C4", # flake8-comprehensions
    "PIE", # flake8-pie
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "PL", # Pylint
    "RUF", # Ruff-specific rules
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "N", # pep8-naming
    "F", # Pyflakes
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "LOG", # flake8-logging
    #    "ANN001", # Missing type annotation for function argument {name}
    #    "ANN201", # Missing return type annotation for public function {name}
]
ignore = [
    "RUF012",
    "PLR0912",
    "PLR0915",
    "B904",
    "A002",  # Argument `{name}` is shadowing a Python builtin
    "PLW2901",  #  `for` loop variable `` overwritten by assignment target
    "N818", # Exception name `{name}` should be named with an Error suffix
    "N805",  # First argument of a method should be named `self`
    "C408",  # Unnecessary `dict` call (rewrite as a literal)
    "SIM102",  # Use a single `if` statement instead of nested `if` statements
    "B008",  # Do not perform function call `{name}` in argument defaults
    "RET504",  #  Unnecessary assignment to `{name}` before `return` statement
    "SIM108",  # Use ternary operator `path = f"{table}.{format}" if path is None else f"{path}/{table}.{format}"` instead of `if`-`else`-block
    "ISC001"

]
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pylint]
max-args = 10
max-returns = 7


[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = false
docstring-code-line-length = "dynamic"

# flake8-pytest-style (PT)#
